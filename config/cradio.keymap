#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE>; };

&sk {
    quick-release;
    release-after-ms = <2000>;
};

/ {
    behaviors {
        shft_cq: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            label = "SHFT_CW";
            bindings = <&kp LSHIFT>, <&caps_word>;

            tapping-term-ms = <200>;
        };

        am: alpha_modes {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <240>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        FUNC_COMBO {
            bindings = <&mo 4>;
            key-positions = <30 33>;
        };

        NAV_COMBO_1 {
            bindings = <&mo 5>;
            key-positions = <33 32>;
        };

        NAV_COMBO_2 {
            bindings = <&mo 5>;
            key-positions = <30 32>;
        };
    };

    macros {
        mod1: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LMETA>;
            label = "NEW_MACRO";
        };

        mod2: mod2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT>;
            label = "MOD2";
        };

        mod3: mod3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>;
            label = "MOD3";
        };

        mod4: mod4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>;
            label = "MOD4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp Q  &kp W  &kp E  &kp R     &kp T              &kp Y        &kp U      &kp I  &kp O      &kp P
&kp A  &kp S  &kp D  &kp F     &kp G              &kp H        &kp J      &kp K  &kp L      &kp SEMICOLON
&none  &kp Z  &kp X  &kp C     &kp V              &kp B        &kp N      &kp M  &kp COMMA  &kp DOT
                     &shft_cq  &lt 1 BACKSPACE    &lt 2 SPACE  &lt 3 TAB
            >;
        };

        LEFT-MOD {
            bindings = <
&kp GT  &kp RBKT  &kp RBRC  &kp RPAR  &none        &trans  &trans  &trans  &trans  &trans
&kp LT  &kp LBKT  &kp LBRC  &kp LPAR  &none        &trans  &trans  &trans  &trans  &trans
&mod1   &mod2     &mod3     &mod4     &kp ENTER    &trans  &trans  &trans  &trans  &trans
                            &trans    &trans       &trans  &trans
            >;
        };

        RIGHT-MOD {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp GRAVE  &kp BSLH  &trans     &kp SQT  &kp PIPE
&trans  &trans  &trans  &trans  &trans    &trans     &kp EXCL  &kp QMARK  &kp DQT  &kp COLON
&trans  &trans  &trans  &trans  &trans    &kp ENTER  &mod4     &mod3      &mod2    &mod1
                        &trans  &trans    &trans     &trans
            >;
        };

        NUM_SYM {
            bindings = <
&kp AT  &kp HASH   &kp DLLR  &kp PRCNT  &kp CARET         &kp PLUS   &kp N7  &kp N8  &kp N9  &kp STAR
&trans  &kp TILDE  &kp FSLH  &kp EQUAL  &kp UNDERSCORE    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp N0
&mod1   &mod2      &mod3     &mod4      &trans            &kp ENTER  &kp N1  &kp N2  &kp N3  &trans
                             &trans     &trans            &trans     &trans
            >;
        };

        FUNC {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp F10  &kp F7  &kp F8  &kp F9  &trans
&trans  &trans  &trans  &trans  &trans    &kp F11  &kp F4  &kp F5  &kp F6  &trans
&mod1   &mod2   &mod3   &mod4   &trans    &kp F12  &kp F1  &kp F2  &kp F3  &trans
                        &trans  &trans    &trans   &trans
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &trans
&trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&mod1   &mod2   &mod3   &mod4   &trans    &trans    &trans     &trans     &trans     &trans
                        &trans  &trans    &trans    &trans
            >;
        };
    };
};

// vim:ft=c
