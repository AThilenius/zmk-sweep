#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE>; };

&sk {
    quick-release;
    release-after-ms = <2000>;
};

/ {
    behaviors {
        shft_cq: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            label = "SHFT_CW";
            bindings = <&kp LSHIFT>, <&caps_word>;

            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        NAV_COMBO {
            bindings = <&mo 2>;
            key-positions = <30 33>;
        };

        FUNC_COMBO {
            bindings = <&mo 4>;
            key-positions = <33 14>;
        };

        NUM_ALT_COMBO {
            bindings = <&mo 2>;
            key-positions = <32 33>;
        };

        ESC_COMBO {
            bindings = <&kp ESC>;
            key-positions = <10 19>;
        };

        ENTER_COMBO {
            bindings = <&kp ENTER>;
            key-positions = <13 16>;
        };

        ENTER_RIGHT_COMBO {
            bindings = <&kp ENTER>;
            key-positions = <15 16 17>;
        };

        ENTER_LEFT_COMBO {
            bindings = <&kp ENTER>;
            key-positions = <14 13 12>;
        };

        BT_CTL_COMBO {
            bindings = <&mo 5>;
            key-positions = <30 19 10 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp Q     &kp W  &kp E  &kp R  &kp T       &kp Y      &kp U  &kp I  &kp O      &kp P
&kp A     &kp S  &kp D  &kp F  &kp G       &kp H      &kp J  &kp K  &kp L      &kp SEMICOLON
&kp FSLH  &kp Z  &kp X  &kp C  &kp V       &kp B      &kp N  &kp M  &kp COMMA  &kp DOT
                        &mo 3  &shft_cq    &kp SPACE  &mo 1
            >;
        };

        SYM {
            bindings = <
&kp GRAVE  &kp LBKT   &kp LBRC  &kp LPAR  &kp TILDE    &kp CARET      &kp RPAR   &kp RBRC    &kp RBKT   &kp STAR
&kp MINUS  &kp EQUAL  &kp DQT   &kp SQT   &kp UNDER    &kp HASH       &sk LCTRL  &sk LSHIFT  &sk LGUI   &sk LALT
&kp PLUS   &kp DLLR   &kp AT    &kp PIPE  &kp PRCNT    &kp BACKSLASH  &kp AMPS   &trans      &kp QMARK  &kp EXCL
                                &trans    &trans       &trans         &trans
            >;
        };

        NAV {
            bindings = <
&kp LG(F)  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
&kp LALT   &kp LGUI    &kp LSHIFT  &kp LCTRL   &none         &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans     &trans      &trans      &trans      &none         &trans    &none      &none      &trans     &trans
                                   &trans      &trans        &kp TAB   &trans
            >;
        };

        NUM {
            bindings = <
&kp ESC   &kp LG(H)  &kp LG(L)   &kp LG(N1)  &kp LG(N2)    &trans     &kp N7  &kp N8  &kp N9  &kp DEL
&sk LALT  &sk LGUI   &sk LSHIFT  &sk LCTRL   &kp LG(N3)    &kp ENTER  &kp N4  &kp N5  &kp N6  &kp BACKSPACE
&trans    &trans     &trans      &kp LG(N5)  &kp LG(N4)    &kp N0     &kp N1  &kp N2  &kp N3  &trans
                                 &trans      &trans        &kp TAB    &trans
            >;
        };

        FUNC {
            bindings = <
&trans    &trans    &trans      &trans     &trans    &kp F10  &kp F7  &kp F8  &kp F9  &trans
&kp LALT  &kp LGUI  &kp LSHIFT  &kp LCTRL  &trans    &kp F11  &kp F4  &kp F5  &kp F6  &trans
&trans    &trans    &trans      &trans     &trans    &kp F12  &kp F1  &kp F2  &kp F3  &trans
                                &trans     &trans    &trans   &trans
            >;
        };

        KB_CTL {
            bindings = <
&none  &none  &none  &none  &bootloader    &bootloader   &none         &none         &none         &none
&none  &none  &none  &none  &none          &bt BT_CLR    &bt BT_SEL 4  &none         &none         &none
&none  &none  &none  &none  &none          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
                     &none  &none          &none         &none
            >;
        };
    };
};

// vim:ft=c
